openapi: 3.0.3
info:
  title: Product Catalog API
  description: |-
    A RESTful API for managing product catalog data, including dimensions and compliance attributes.
    This API is designed using Domain-Driven Design principles, with the Product as the central Aggregate.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
tags:
  - name: Products
    description: Operations related to the Product Catalog
paths:
  /products:
    post:
      tags:
        - Products
      summary: Create a new product
      description: Adds a new product with its dimensions and attributes to the catalog. The SKU must be unique.
      operationId: createProduct
      requestBody:
        description: Product object that needs to be added to the catalog.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              sku: "EXAMPLE-SKU-123"
              title: "Industrial Grade Widget"
              dimensions:
                item:
                  length:
                    value: 10.5
                    unit: "INCHES"
                  width:
                    value: 8.0
                    unit: "INCHES"
                  height:
                    value: 3.2
                    unit: "INCHES"
                  weight:
                    value: 5.0
                    unit: "POUNDS"
                package:
                  length:
                    value: 12.0
                    unit: "INCHES"
                  width:
                    value: 9.5
                    unit: "INCHES"
                  height:
                    value: 4.0
                    unit: "INCHES"
                  weight:
                    value: 5.8
                    unit: "POUNDS"
              attributes:
                hazmatInfo:
                  isHazmat: true
                  unNumber: "UN1950"
    get:
      tags:
        - Products
      summary: List all products
      description: Retrieves a paginated list of all products in the catalog.
      operationId: listProducts
      parameters:
        - name: limit
          in: query
          description: The number of items to return.
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: The number of items to skip for pagination.
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A paged array of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{sku}:
    get:
      tags:
        - Products
      summary: Get product by SKU
      description: Retrieves a single product by its unique Stock Keeping Unit (SKU).
      operationId: getProductBySku
      parameters:
        - name: sku
          in: path
          description: The unique SKU of the product.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Products
      summary: Update a product (Full Replace)
      description: Replaces the entire product resource with the provided data. All fields are required.
      operationId: updateProduct
      parameters:
        - name: sku
          in: path
          description: The unique SKU of the product to update.
          required: true
          schema:
            type: string
      requestBody:
        description: The full product object to replace the existing one.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    patch:
      tags:
        - Products
      summary: Partially update a product
      description: Updates one or more fields of an existing product. Fields not included in the request body will not be changed.
      operationId: patchProduct
      parameters:
        - name: sku
          in: path
          description: The unique SKU of the product to update.
          required: true
          schema:
            type: string
      requestBody:
        description: A product object with the fields to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product partially updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Deletes a product from the catalog by its SKU.
      operationId: deleteProduct
      parameters:
        - name: sku
          in: path
          description: The unique SKU of the product to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
components:
  schemas:
    Product:
      type: object
      description: The core Product aggregate root, representing a unique item in the catalog.
      required:
        - sku
        - title
      properties:
        sku:
          type: string
          description: The unique, seller-defined Stock Keeping Unit.
          example: "EXAMPLE-SKU-123"
        title:
          type: string
          description: The display name of the product.
          example: "Industrial Grade Widget"
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        attributes:
          $ref: '#/components/schemas/Attributes'
    Dimensions:
      type: object
      description: A Value Object containing the physical dimensions of the item and its packaging.
      properties:
        item:
          description: The dimensions of the product itself, without packaging.
          $ref: '#/components/schemas/DimensionSet'
        package:
          description: The dimensions of the product in its shippable packaging.
          $ref: '#/components/schemas/DimensionSet'
    DimensionSet:
      type: object
      description: A complete set of measurements for an object, including length, width, height, and weight.
      properties:
        length:
          $ref: '#/components/schemas/DimensionMeasurement'
        width:
          $ref: '#/components/schemas/DimensionMeasurement'
        height:
          $ref: '#/components/schemas/DimensionMeasurement'
        weight:
          $ref: '#/components/schemas/WeightMeasurement'
    DimensionMeasurement:
      type: object
      description: A measurement of length, width, or height.
      properties:
        value:
          type: number
          format: float
          example: 10.5
        unit:
          type: string
          enum:
          example: "INCHES"
    WeightMeasurement:
      type: object
      description: A measurement of weight.
      properties:
        value:
          type: number
          format: float
          example: 5.8
        unit:
          type: string
          enum:
          example: "POUNDS"
    Attributes:
      type: object
      description: A Value Object for storing additional product characteristics and compliance data.
      properties:
        hazmatInfo:
          $ref: '#/components/schemas/HazmatInfo'
    HazmatInfo:
      type: object
      description: Information related to hazardous material classification.
      properties:
        isHazmat:
          type: boolean
          example: true
        unNumber:
          type: string
          description: The UN number for the hazardous material, if applicable.
          example: "UN1950"
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
